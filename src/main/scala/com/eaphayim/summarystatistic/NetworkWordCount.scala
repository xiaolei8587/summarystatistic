/**
 *
 */
package com.eaphayim.summarystatistic

import org.apache.spark.streaming.StreamingContext
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.SparkConf
import org.apache.spark.streaming.Seconds
import org.apache.spark.storage.StorageLevel
import org.apache.log4j.Logger
import org.apache.spark.streaming.flume.FlumeUtils
import org.apache.spark.Logging
import org.apache.spark.rdd.RDD

/**
 * @author 641158
 *
 */
object NetworkWordCount extends Logging{
   val cls = NetworkWordCount.getClass()
  def main(args: Array[String]): Unit = {
    val sparkConf = new SparkConf().setAppName("NetworkWordCount")
    val ssc = new StreamingContext(sparkConf, Seconds(1))
    val host = args(0)
    val port = args(1).toInt
    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(host, port, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.foreachRDD(x=>show(x))
    ssc.start()
    ssc.awaitTermination()
  }

   def show(rdd:RDD[(String, Int)]) = {
     val arr = rdd.collect
     arr.foreach(x => logInfo("****data:"+x))
   }
}